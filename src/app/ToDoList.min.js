function GroupStat(){this.group=null,this.taskCount=0,this.totalTimeTracked=0,this.completedCount=0,this.remainingCount=0}function Task(){this.group=null,this.name=null,this.dateAdded=new Date,this.dateCompleted=null,this.isCompleted=!1,this.isTracking=!1,this.timeTrackingStarted=null,this.totalTimeTracked=0,this.startTracking=function(){this.timeTrackingStarted=new Date,this.isTracking=!0},this.stopTracking=function(){if(this.timeTrackingStarted){var a=Math.abs(this.timeTrackingStarted.getTime()-(new Date).getTime());this.totalTimeTracked+=a,this.timeTrackingStarted=null,this.isTracking=!1}},this.bankTimeTracked=function(){this.isTracking&&(this.stopTracking(),this.startTracking())},this.markComplete=function(){this.isCompleted=!0,this.dateCompleted=new Date,this.stopTracking()},this.markIncomplete=function(){this.isCompleted=!1,this.dateCompleted=null}}angular.module("jgefroh.AlertModule",[]).constant("truncateLimit",80),function(){function a(a){function b(b){b.alert=a.getAlert()}return{restrict:"A",scope:{},templateUrl:"modules/alert/AlertPanel.html",controller:["$scope",b]}}angular.module("jgefroh.AlertModule").directive("alertPanel",["AlertService",a])}(),function(){function a(a){var b={subject:"DEFAULT_TEXT_TO_AVOID_COLLAPSING",message:"DEFAULT_TEXT_TO_AVOID_COLLAPSING",type:null,isShowing:!1},c=null;this.getAlert=function(){return b},this.setAlert=function(d,e,f,g){b.type=d,b.subject=e,b.message=f,b.isShowing=!0,null!=c&&a.cancel(c),c=a(function(){b.isShowing=!1,c=null},g)}}angular.module("jgefroh.AlertModule").service("AlertService",["$timeout",a])}(),function(){function a(){return{remainingTaskViewState:{isAscending:null,sortField:null,isShowingMinutes:null},completedTaskViewState:{isAscending:null,sortField:null,isShowingMinutes:null},statisticsViewState:{isAscending:null,sortField:null,isShowingMinutes:null},taskCreationViewState:{input:{name:null,group:null}}}}angular.module("ToDoList.ViewStateModule",[]).service("ViewState",a)}(),angular.module("jgefroh.FiltersModule",[]),function(){function a(){return function(a,b){return(a/6e4/60).toFixed(b)}}function b(){return function(a,b){return(a/6e4).toFixed(b)}}angular.module("jgefroh.FiltersModule").filter("msToHours",a).filter("msToMinutes",b)}(),function(){function a(a,b,c,d,e){var f=this;f.applicationName=d,f.versionNumber=e,f.getTasks=function(){return a.getTasks()},f.goTo=function(a){c.path(a)},f.requestStatUpdate=function(){b.requestStatUpdate()},f.isActive=function(a){return c.path()===a}}angular.module("ToDoList.NavigationModule",[]).controller("NavigationCtrl",["TaskService","StatsService","$location","applicationName","versionNumber",a])}(),function(){function a(a,b){function c(){e.export.json=angular.toJson(a.getTasks())}function d(){b.setAlert("alert-danger","Load failed!","We couldn't read your saved tasks properly. Please ensure there are no typos and try again.",5e3)}var e=this;e.export={json:null},e.import={json:null},c(),e.load=function(e){try{e.json?(a.setTasks(angular.fromJson(e.json)),c(),b.setAlert("alert-info","Load successful!",a.getTasks().length+" tasks have been loaded.",2e3),e.json=null):d()}catch(f){d()}}}angular.module("ToDoList.PersistenceModule",[]).controller("PersistenceCtrl",["TaskService","AlertService",a])}(),angular.module("ToDoList.StatsModule",[]),function(){function a(a,b){function c(){a(function(){d(),c()},h)}function d(){b.requestUpdateTimeTrackedForAllTasks();var a=e();for(f.length=0,index=0;index<g.length;index++){var c=g[index];c.bankTimeTracked();var d=a[c.group];d.taskCount++,d.totalTimeTracked+=c.totalTimeTracked,c.isCompleted?d.completedCount++:d.remainingCount++}for(var h in a)f.push(a[h])}function e(){var a={};for(taskIndex=0;taskIndex<g.length;taskIndex++){var b=g[taskIndex].group;if(!a[b]){var c=new GroupStat;c.group=b,a[b]=c}}return a}var f=[],g=b.getTasks(),h=3e4;c(),this.getGroupStats=function(){return f},this.requestStatUpdate=function(){d()},this.getGroupStats=function(){return f}}angular.module("ToDoList.StatsModule").service("StatsService",["$timeout","TaskService",a])}(),function(){function a(a,b){function c(){d.viewState=a.statisticsViewState}var d=this;c(),b.requestStatUpdate(),d.getGroupStats=function(){return b.getGroupStats()}}angular.module("ToDoList.StatsModule").controller("TaskStatisticsCtrl",["ViewState","StatsService",a])}(),angular.module("ToDoList.TaskModule",[]),function(){function a(a){function b(){a(function(){c(),b()},g)}function c(){for(var a=0;a<f.length;a++){var b=f[a];b.bankTimeTracked()}}function d(a,b){return a||b}function e(a,b){var c=new Task;return c.name=a,c.group=b,c}var f=[],g=3e4;b(),this.createTask=function(a){if(d(a.name,a.group)){var b=e(a.name,a.group);f.unshift(b)}},this.getTasks=function(){return f},this.setTasks=function(a){f.length=0,angular.forEach(a,function(a){var b=new Task;b.group=a.group,b.name=a.name,b.dateAdded=new Date(a.dateAdded),b.dateCompleted=new Date(a.dateCompleted),b.isCompleted=a.isCompleted,b.isTracking=a.isTracking,b.timeTrackingStarted=new Date(a.timeTrackingStarted),b.totalTimeTracked=a.totalTimeTracked,f.unshift(b)})},this.markComplete=function(a){a.markComplete()},this.markTaskIncomplete=function(a){a.markIncomplete()},this.requestUpdateTimeTrackedForAllTasks=function(){c()},this.startTrackingTask=function(a){a.startTracking()},this.stopTrackingTask=function(a){a.stopTracking()}}angular.module("ToDoList.TaskModule").service("TaskService",["$timeout",a])}(),function(){function a(a,b,c,d,e){function f(){g.viewState=a.completedTaskViewState}var g=this;f(),g.getTasks=function(){return b.getTasks()},g.markIncomplete=function(a){b.markTaskIncomplete(a),null!=a.name?c.setAlert("alert-warning","Task Incomplete!",e("limitTo")(a.name,d)+" has been marked as incomplete.",2e3):c.setAlert("alert-warning","Task Incomplete!","A task has been marked as incomplete.",2e3)}}angular.module("ToDoList.TaskModule").controller("CompletedTasksCtrl",["ViewState","TaskService","AlertService","truncateLimit","$filter",a])}(),function(){function a(a,b){function c(c){function d(){c.viewState=a.taskCreationViewState}function e(a){a.name=null,a.group=null}var f=13;d(),c.addTask=function(a){a&&(b.createTask(a),e(a))},c.addTaskOnEnterKeyPressed=function(a,b){b.which===f&&c.addTask(a)}}return{restrict:"A",scope:{},templateUrl:"modules/task/creation/TaskCreation.html",controller:["$scope",c]}}angular.module("ToDoList.TaskModule").directive("taskCreation",["ViewState","TaskService",a])}(),function(){function a(a,b,c,d,e){function f(){g.viewState=a.remainingTaskViewState}var g=this;f(),b.requestUpdateTimeTrackedForAllTasks(),g.dateFilter=function(){return e("24HourTime")},g.getTasks=function(){return b.getTasks()},g.markComplete=function(a){b.markComplete(a),null!=a.name?c.setAlert("alert-success","Task Complete!",e("limitTo")(a.name,d)+" has been marked as complete.",2e3):c.setAlert("alert-success","Task Complete!","A task has been marked as complete.",2e3)},g.prepareEditTask=function(a){currentlyEditedTask=a,g.inputCopy=angular.copy(currentlyEditedTask)},g.editTask=function(a){currentlyEditedTask.name=a.name,currentlyEditedTask.group=a.group,g.inputCopy=null,currentlyEditedTask=null},g.startTrackingTask=function(a){b.startTrackingTask(a)},g.stopTrackingTask=function(a){b.stopTrackingTask(a)}}angular.module("ToDoList.TaskModule").controller("RemainingTasksCtrl",["ViewState","TaskService","AlertService","truncateLimit","$filter",a])}(),angular.module("ToDoList",["ngRoute","jgefroh.AlertModule","jgefroh.FiltersModule","ToDoList.PersistenceModule","ToDoList.Routes","ToDoList.TaskModule","ToDoList.StatsModule","ToDoList.NavigationModule","ToDoList.ViewStateModule"]),angular.module("ToDoList").constant("applicationName","ToDoList").constant("versionNumber","v0.9.0"),function(){function a(a){a.when("/",{redirectTo:"/remaining"}).when("/remaining",{templateUrl:"modules/task/remaining/RemainingTasks.html",controller:"RemainingTasksCtrl",controllerAs:"remainingCtrl"}).when("/completed",{templateUrl:"modules/task/completed/CompletedTasks.html",controller:"CompletedTasksCtrl",controllerAs:"completedCtrl"}).when("/statistics",{templateUrl:"modules/stats/TaskStatistics.html",controller:"TaskStatisticsCtrl",controllerAs:"statsCtrl"}).when("/persistence",{templateUrl:"modules/persistence/Persistence.html",controller:"PersistenceCtrl",controllerAs:"persistenceCtrl"}).otherwise({templateUrl:"app404.html"})}angular.module("ToDoList.Routes",[]).config(["$routeProvider",a])}();