function GroupStat(){this.group=null,this.taskCount=0,this.totalTimeTracked=0,this.completedCount=0,this.remainingCount=0}function Task(){this.group=null,this.name=null,this.dateAdded=new Date,this.dateCompleted=null,this.isCompleted=!1,this.isTracking=!1,this.timeTrackingStarted=null,this.totalTimeTracked=0,this.startTracking=function(){this.timeTrackingStarted=new Date,this.isTracking=!0},this.stopTracking=function(){if(this.timeTrackingStarted){var a=Math.abs(this.timeTrackingStarted.getTime()-(new Date).getTime());this.totalTimeTracked+=a,this.timeTrackingStarted=null,this.isTracking=!1}},this.bankTimeTracked=function(){this.isTracking&&(this.stopTracking(),this.startTracking())},this.markComplete=function(){this.isCompleted=!0,this.dateCompleted=new Date,this.stopTracking()},this.markIncomplete=function(){this.isCompleted=!1,this.dateCompleted=null}}angular.module("jgefroh.AlertModule",[]).constant("truncateLimit",80),angular.module("jgefroh.FiltersModule",[]),angular.module("ToDoList.StatsModule",[]),angular.module("ToDoList.TaskModule",[]),function(){function a(a){function b(b){b.alert=a.getAlert()}return{restrict:"A",scope:{},templateUrl:"modules/alert/AlertPanel.html",controller:["$scope",b]}}angular.module("jgefroh.AlertModule").directive("alertPanel",["AlertService",a])}(),function(){function a(a){var b={subject:"DEFAULT_TEXT_TO_AVOID_COLLAPSING",message:"DEFAULT_TEXT_TO_AVOID_COLLAPSING",type:null,isShowing:!1},c=null;this.getAlert=function(){return b},this.setAlert=function(d,e,f,g){b.type=d,b.subject=e,b.message=f,b.isShowing=!0,null!=c&&a.cancel(c),c=a(function(){b.isShowing=!1,c=null},g)}}angular.module("jgefroh.AlertModule").service("AlertService",["$timeout",a])}(),function(){function a(){return{remainingTaskViewState:{isAscending:null,sortField:null,isShowingMinutes:null},completedTaskViewState:{isAscending:null,sortField:null,isShowingMinutes:null},statisticsViewState:{isAscending:null,sortField:null,isShowingMinutes:null},taskCreationViewState:{input:{name:null,group:null}}}}angular.module("ToDoList.ViewStateModule",[]).service("ViewState",a)}(),function(){function a(){return function(a,b){return(a/6e4/60).toFixed(b)}}function b(){return function(a,b){return(a/6e4).toFixed(b)}}angular.module("jgefroh.FiltersModule").filter("msToHours",a).filter("msToMinutes",b)}(),function(){function a(a,b,c,d,e,f){var g=this;g.user=f.user,g.applicationName=d,g.versionNumber=e,g.getTasks=function(){return a.getTasks()},g.goTo=function(a){c.path(a)},g.requestStatUpdate=function(){b.requestStatUpdate()},g.isActive=function(a){return c.path()===a}}angular.module("ToDoList.NavigationModule",[]).controller("NavigationCtrl",["TaskService","StatsService","$location","applicationName","versionNumber","UserService",a])}(),function(){function a(a,b){function c(){a.requestUpdateTimeTrackedForAllTasks(),e.export.json=angular.toJson(a.getTasks())}function d(){b.setAlert("alert-danger","Load failed!","We couldn't read your saved tasks properly. Please ensure there are no typos and try again.",5e3)}var e=this;e.export={json:null},e.import={json:null},c(),e.load=function(e){try{e.json?(a.setTasks(angular.fromJson(e.json)),c(),b.setAlert("alert-info","Load successful!",a.getTasks().length+" tasks have been loaded.",2e3),e.json=null):d()}catch(f){d()}}}angular.module("ToDoList.PersistenceModule",[]).controller("PersistenceCtrl",["TaskService","AlertService",a])}(),function(){function a(a,b,c){this.user={id:null},this.reserveID=function(d){var e=a.defer();return d?(this.user.id=d,e.promise.resolve(this.user.id),e):b.get(c.security.getURL())}}angular.module("ToDoList.SecurityModule",[]).service("UserService",["$q","$http","endpoints",a])}(),function(){function a(a,b){function c(){a(function(){d(),c()},h)}function d(){b.requestUpdateTimeTrackedForAllTasks();var a=e();for(f.length=0,index=0;index<g.length;index++){var c=g[index];c.bankTimeTracked();var d=a[c.group];d.taskCount++,d.totalTimeTracked+=c.totalTimeTracked,c.isCompleted?d.completedCount++:d.remainingCount++}for(var h in a)f.push(a[h])}function e(){var a={};for(taskIndex=0;taskIndex<g.length;taskIndex++){var b=g[taskIndex].group;if(!a[b]){var c=new GroupStat;c.group=b,a[b]=c}}return a}var f=[],g=b.getTasks(),h=3e4;c(),this.getGroupStats=function(){return f},this.requestStatUpdate=function(){d()},this.getGroupStats=function(){return f}}angular.module("ToDoList.StatsModule").service("StatsService",["$timeout","TaskService",a])}(),function(){function a(a,b){function c(){d.viewState=a.statisticsViewState}var d=this;c(),b.requestStatUpdate(),d.getGroupStats=function(){return b.getGroupStats()}}angular.module("ToDoList.StatsModule").controller("TaskStatisticsCtrl",["ViewState","StatsService",a])}(),function(){function a(a,b){function c(){b(function(){d(),c()},h)}function d(){for(var a=0;a<g.length;a++){var b=g[a];b.bankTimeTracked()}}function e(a,b){return a||b}function f(a,b){var c=new Task;return c.name=a,c.group=b,c}var g=[],h=3e4;c(),this.createTask=function(a){if(e(a.name,a.group)){var b=f(a.name,a.group);g.unshift(b)}},this.getTasks=function(){return g},this.setTasks=function(a){g.length=0,angular.forEach(a,function(a){var b=new Task;b.group=a.group,b.name=a.name,b.dateAdded=new Date(a.dateAdded),b.dateCompleted=new Date(a.dateCompleted),b.isCompleted=a.isCompleted,b.isTracking=a.isTracking,b.timeTrackingStarted=new Date,b.totalTimeTracked=a.totalTimeTracked,g.unshift(b)})},this.markComplete=function(a){a.markComplete()},this.markTaskIncomplete=function(a){a.markIncomplete()},this.requestUpdateTimeTrackedForAllTasks=function(){d()},this.startTrackingTask=function(a){a.startTracking()},this.stopTrackingTask=function(a){a.stopTracking()}}angular.module("ToDoList.TaskModule").service("TaskService",["$http","$timeout","UserService",a])}(),function(){function a(a,b,c,d,e){function f(){g.viewState=a.completedTaskViewState}var g=this;f(),g.getTasks=function(){return b.getTasks()},g.markIncomplete=function(a){b.markTaskIncomplete(a),null!=a.name?c.setAlert("alert-warning","Task Incomplete!",e("limitTo")(a.name,d)+" has been marked as incomplete.",2e3):c.setAlert("alert-warning","Task Incomplete!","A task has been marked as incomplete.",2e3)}}angular.module("ToDoList.TaskModule").controller("CompletedTasksCtrl",["ViewState","TaskService","AlertService","truncateLimit","$filter",a])}(),function(){function a(a,b){function c(c){function d(){c.viewState=a.taskCreationViewState}function e(a){a.name=null,a.group=null}var f=13;d(),c.addTask=function(a){a&&(b.createTask(a),e(a))},c.addTaskOnEnterKeyPressed=function(a,b){b.which===f&&c.addTask(a)}}return{restrict:"A",scope:{},templateUrl:"modules/task/creation/TaskCreation.html",controller:["$scope",c]}}angular.module("ToDoList.TaskModule").directive("taskCreation",["ViewState","TaskService",a])}(),function(){function a(a,c,d,e,f,g){function h(){j.viewState=a.remainingTaskViewState}function i(){g.$on("$locationChangeStart",function(){var a=b(".modal-backdrop");a&&a.remove()})}var j=this;h(),i(),c.requestUpdateTimeTrackedForAllTasks(),j.dateFilter=function(){return f("24HourTime")},j.getTasks=function(){return c.getTasks()},j.markComplete=function(a){c.markComplete(a),null!=a.name?d.setAlert("alert-success","Task Complete!",f("limitTo")(a.name,e)+" has been marked as complete.",2e3):d.setAlert("alert-success","Task Complete!","A task has been marked as complete.",2e3)},j.prepareEditTask=function(a){currentlyEditedTask=a,j.inputCopy=angular.copy(currentlyEditedTask)},j.editTask=function(a){currentlyEditedTask.name=a.name,currentlyEditedTask.group=a.group,j.inputCopy=null,currentlyEditedTask=null},j.startTrackingTask=function(a){c.startTrackingTask(a)},j.stopTrackingTask=function(a){c.stopTrackingTask(a)}}var b=jQuery.noConflict();angular.module("ToDoList.TaskModule").controller("RemainingTasksCtrl",["ViewState","TaskService","AlertService","truncateLimit","$filter","$rootScope",a])}(),angular.module("ToDoList",["ui.router","jgefroh.AlertModule","jgefroh.FiltersModule","ToDoList.PersistenceModule","ToDoList.Routes","ToDoList.SecurityModule","ToDoList.TaskModule","ToDoList.StatsModule","ToDoList.NavigationModule","ToDoList.ViewStateModule"]),angular.module("ToDoList").constant("applicationName","ToDoList").constant("versionNumber","v1.0.0").constant("endpoints",{security:{getURL:function(){return"../rest/security"}}}),function(){function a(a){a.state("remaining",{url:"/remaining/:userID",templateUrl:"modules/task/remaining/RemainingTasks.html",controller:"RemainingTasksCtrl",controllerAs:"remainingCtrl",resolve:{userID:["$stateParams","UserService",function(a,b){return b.user.id=a.userID,a.userID}]}}).state("completed",{url:"/completed/:userID",templateUrl:"modules/task/completed/CompletedTasks.html",controller:"CompletedTasksCtrl",controllerAs:"completedCtrl",resolve:{userID:["$stateParams","UserService",function(a,b){return b.reserveID(a.userID)}]}}).state("statistics",{url:"/statistics/:userID",templateUrl:"modules/stats/TaskStatistics.html",controller:"TaskStatisticsCtrl",controllerAs:"statsCtrl",resolve:{userID:["$stateParams","UserService",function(a,b){return b.user.id=a.userID,a.userID}]}}).state("persistence",{url:"/persistence/:userID",templateUrl:"modules/persistence/Persistence.html",controller:"PersistenceCtrl",controllerAs:"persistenceCtrl",resolve:{userID:["$stateParams","UserService",function(a,b){return b.user.id=a.userID,a.userID}]}})}angular.module("ToDoList.Routes",[]).config(["$stateProvider","$urlRouterProvider","endpoints",a])}();